
const bcrypt = require('bcrypt');
const User = require('../models/user.model');
const jwt = require('jsonwebtoken');


// TODO: More input validations


// Create and Save a new User
exports.create = async (req, res) => {

    // Create a User
    const user = new User({
        // id: req.body.id,
        email: req.body.email,
        password: req.body.password,
        firstname: req.body.firstname,
        lastname: req.body.lastname,
        age: req.body.age,
        gender: req.body.gender,
        gender_target: req.body.gender_target,
        profile_pic: req.body.profile_pic,
        bio: req.body.bio,
        // created_at: req.body.created_at, (its autogenerated in the db)
    });


    // Encrypt password
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(req.body.password, salt);


    // res.send(result);
    User.create(user, (err, user) => {
        if (err)
            res.status(500).send({
                message:
                    err.message || "Some error occurred while creating the User."
            });
        else {
            // 4. Return jsonwebtoken
            const payload = {
                user: {
                    id: user.id
                }
            }

            jwt.sign(payload, process.env['jwtSecret'], { expiresIn: 360000 }, (err, token) => {
                if (err) throw err;
                console.log(`User registered ${user.id}`)
                res.json({ token });
            })
        }
    });

};

// Retrieve all Users from the database.
exports.findAll = (req, res) => {
    const filters = req.query;

    User.getAll(filters, (err, users) => {
        if (err)
            res.status(500).send({
                message:
                    err.message || "Some error occurred while retrieving users."
            });
        else res.send(users);
    });
};

// Find a single User with a userId
exports.findOne = (req, res) => {
    User.findById(req.params.userId, (err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                    message: `Not found User with id ${req.params.userId}.`
                });
            } else {
                res.status(500).send({
                    message: "Error retrieving User with id " + req.params.userId
                });
            }
        } else res.send(data);
    });
};

// Update a User identified by the userId in the request
exports.update = (req, res) => {
    if (req.user.id != req.params.userId) {
        return res.status(400).send({
            message: `You are user ${req.user.id}. Not allowed to upadate user ${req.params.userId}`
        })
    }
    // Validate Request
    if (Object.keys(req.body).length === 0) {
        res.status(400).send({
            message: "Content can not be empty!"
        });
    }

    User.updateById(
        req.params.userId,
        req.body,
        (err, data) => {
            if (err) {
                if (err.kind === "not_found") {
                    res.status(404).send({
                        message: `Not found User with id ${req.params.userId}.`
                    });
                } else {
                    res.status(500).send({
                        message: "Error updating User with id " + req.params.userId,
                        error: err
                    });
                }
            } else res.send(data);
        }
    );
};

// Delete a User with the specified userId in the request
exports.delete = (req, res) => {
    User.remove(req.params.userId, (err, data) => {
        if (err) {
            if (err.kind === "not_found") {
                res.status(404).send({
                    message: `Not found User with id ${req.params.userId}.`
                });
            } else {
                res.status(500).send({
                    message: "Could not delete User with id " + req.params.userId
                });
            }
        } else res.send({ message: `User was deleted successfully!` });
    });
};

// Delete all User from the database.
exports.deleteAll = (req, res) => {
    User.removeAll((err, data) => {
        if (err)
            res.status(500).send({
                message:
                    err.message || "Some error occurred while removing all users."
            });
        else res.send({ message: `All users were deleted successfully!` });
    });
};